# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# Trigger a build on pull to main.
trigger:
  branches:
    include:
      - main

# Schedule a build every Monday at 4AM in order for period security checking.
schedules:
  - cron: 0 4 * * 1
    displayName: 'Build every Mondat 4AM'
    branches:
      include:
        - main
    always: true

pool:
  vmImage: ubuntu-latest

variables: 
  trivyVersion: 0.28.0

strategy:
  matrix:
    Python38:
      python.version: '3.8'
      tox.env: py38
    Python39:
      python.version: '3.9'
      tox.env: py39
    Python310:
      python.version: '3.10'
      tox.env: py310

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

# Update and install requirements with pip-tools
# pip install -U pip ensures the latest version of pip is used
# use requirements.in to pin major libraries 
- script: |
    python -m pip install -U pip 
    pip install setuptools wheel pip-tools 
    python -m piptools compile
    pip install -r requirements.txt
  displayName: 'Update and install requirements'

# Test with Tox
- script: |
    tox -e $(tox.env)
  displayName: 'Run security, linting and unit tests with Tox'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
  displayName: 'Publish unit test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
  displayName: 'Report code coverage'


# License and dependency scan
- task: WhiteSource@21
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)'
    projectName: 'ic-ventilation'
  displayName: 'License and dependency scan'


# Install trivy for container security scans
# Note that trivy can also do dependency scans: https://pythonspeed.com/articles/docker-python-security-scan/ 
#- script: |
#    sudo apt-get install -y rpm 
#    wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
#    sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
#    trivy -v
#  displayName: 'Install Trivy'

#
# Add docker build here
#

#- task: CmdLine@2
#  displayName: 'Run Trivy security scan'
#  inputs:
#    script: |
#      trivy image --exit-code 0 --severity LOW,MEDIUM <add containter from repo, e.g. janvandenbrand/removeme:latest>
#      trivy image --exit-code 1 --severity HIGH,CRITICAL <add containter from repo, e.g. janvandenbrand/removeme:latest> 
